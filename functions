#!/bin/ksh
#
# Functions: group of functions
#


$FULLDEBUG

function rmifexists		# Remove the file or several files if the file existes function: rmifexists
{
$FULLDEBUG
	for f in $*
	do
		if [ -r $f ]
		then
			if [ -d $f ]
			then
				runit rmdir $f
			else
				runit rm -f $f
		 	fi
	 	fi
	done
}

function fatalcheckenv		# Check the environnment if environnment is not setted function: fatalcheckenv , fatal error output will be displayed.
{
$FULLDEBUG
        var="$1"
        eval "test -z \"\$$var\""
        if [ $? -eq 0 ]
        then
                fatalerror 2 "Variable $var is not set"
        fi
}

function exectoreport		# Execute and make the report function: exectoreport
{
exec >>$FACTORY_LOGFILE 2>&1
FACTORY_NOTTY=1
export FACTORY_NOTTY
return
}


function factory_id
{
$FULLDEBUG
        case $FACTORY_PLATFORM in
                SunOS)          
                        /usr/xpg4/bin/id $*
                        ;;                 
                *)        
                        id $*
                        ;;   
        esac

}

# Output format messages in VARFACTORY_LOG (/var/factory/logs) function: msgprefix

function msgprefix
{
$FULLDEBUG
	if [ "$FACTORY_NOMSGPREFIX" ]
	then
		return 0 
	fi

	if [ "$FACTORY_LOGFULLDATE" ]
	then
		FACTORY_MSGPREFIX=`date +"%H:%M:%S %Y/%m/%d"`
	else
		FACTORY_MSGPREFIX=`date +"%H:%M:%S"`
	fi

	if [ "$FACTORY_LOGPROGNAME" ]
	then
		if [ "$FACTORY_LOGPID" ]
		then
			FACTORY_MSGPREFIX="$FACTORY_MSGPREFIX $PROGNAME[$$]"
		else
			FACTORY_MSGPREFIX="$FACTORY_MSGPREFIX $PROGNAME"
		fi
	else
		if [ "$FACTORY_LOGPID" ]
		then
			FACTORY_MSGPREFIX="$FACTORY_MSGPREFIX [$$]"
		fi
	fi

	if [ "$FACTORY_LOGHOSTNAME" ]
	then
		if [ "$FACTORY_LOGUSER" ]
		then
			username=`factory_id -un`
			if [ "$username" != "$LOGNAME" ]
			then
				FACTORY_MSGPREFIX="$ ($FACTORY_MSGPREFIX,$LOGNAME)@$HOSTNAME"
			else
				FACTORY_MSGPREFIX="$FACTORY_MSGPREFIX $username@$HOSTNAME"
			fi
		else
			FACTORY_MSGPREFIX="$FACTORY_MSGPREFIX $HOSTNAME"
		fi
	fi
	$ECHOCMD $FACTORY_MSGPREFIX
}




# Activate the log information in VARFACTORY_LOG (/var/factory/log) function: loginfo followed the output format function

function loginfo
{
$FULLDEBUG
	FACTORY_MSGPREFIX=`msgprefix`
	if [[ -z "$FACTORY_NOTTY" || "$FACTORY_DOLLARU" = "Y" ]]
	then
		$ECHOCMD I: $FACTORY_MSGPREFIX "$*" | tee -a $FACTORY_LOGFILE
	else
		$ECHOCMD I: $FACTORY_MSGPREFIX "$*" >> $FACTORY_LOGFILE
	fi
}

# Activate the log information in VARFACTORY_LOG (/var/factory/log) function: logtolog followed the output format function only to log
function logtolog
{
$FULLDEBUG
	FACTORY_MSGPREFIX=`msgprefix`
	$ECHOCMD L: $FACTORY_MSGPREFIX "$*" >> $FACTORY_LOGFILE
}

# Append log contents followed the informations level E as Error, I as Info, W as Warning, D as Debug function: logfromfile to the factory log (/var/factory/log)

function logfromfile
{
$FULLDEBUG
	FACTORY_MSGPREFIX=`msgprefix`
	loglevel=$1
        filename=$2

	cat $filename | while read line
	do
		case "$loglevel" in
			E)
				logerror "$line"
				;;
			I)
				loginfo "$line"
				;;
			W)
				logwarn "$line"
				;;
			D)
				logdebug "$line"
				;;
		esac
	done
}

# Transform any log line in level warning W function: logwarn
function logwarn
{
$FULLDEBUG
	FACTORY_MSGPREFIX=`msgprefix`
	if [[ -z "$FACTORY_NOTTY" || "$FACTORY_DOLLARU" = "Y" ]]
	then
		$ECHOCMD W: $FACTORY_MSGPREFIX "$*" | tee -a $FACTORY_LOGFILE
	else
		$ECHOCMD W: $FACTORY_MSGPREFIX "$*" >> $FACTORY_LOGFILE
	fi
}



# 
# Transform any log line in level warning E function: logerror

function logerror
{
$FULLDEBUG
	FACTORY_MSGPREFIX=`msgprefix`
	if [[ -z "$FACTORY_NOTTY" || "$FACTORY_DOLLARU" = "Y" ]]
	then
		 $ECHOCMD ${REVERSE_ON}E: $FACTORY_MSGPREFIX "$*"${REVERSE_OFF}>&2
		 $ECHOCMD E: $FACTORY_MSGPREFIX "$*" >> $FACTORY_LOGFILE
	else
		$ECHOCMD E: $FACTORY_MSGPREFIX "$*" >> $FACTORY_LOGFILE
	fi
}


# Transform any log line in level warning D function: logdebug

function logdebug
{
$FULLDEBUG
	FACTORY_MSGPREFIX=`msgprefix`
	if [[ -z "$FACTORY_NOTTY" || "$FACTORY_DOLLARU" = "Y" ]]
	then
		$ECHOCMD D: $FACTORY_MSGPREFIX "$*" | tee -a $FACTORY_LOGFILE
	else
		$ECHOCMD D: $FACTORY_MSGPREFIX "$*" >> $FACTORY_LOGFILE
	fi
}

# Exit in fatal error messages function: fatalerror
function fatalerror
{
$FULLDEBUG
	rc=$1
	shift
	logerror "$*"
	exit $rc
}

# Formating a log message and send to syslog function: logsyslog 

function logsyslog
{
        # SEVERITY= info, warning, critical or fatal (default critical)
        SEVERITY="critical"
        # ZZZ = error source (UNX,ORA,BKP,APP)
        # NNNN = error number (0001, 0123, 9405)
        REFCODE=REF-9999
        # tag is by default factory to send to tivoli
        TAG=factory
        while getopts ":r:s:t:" opt
        do
            case $opt in
                s)      SEVERITY=$OPTARG ;;
                r)      REFCODE=$OPTARG ;;
                t)      TAG=$OPTARG ;;
                *|/?)	logerror "check usage of logsyslog function $opt"
                        return 22;;
                esac
        done
	shift $(($OPTIND - 1))
	OPTIND=1
	MESSAGE=$1
        if [ -z "$MESSAGE" ]
        then
                logerror "No message specified $MESSAGE "
                return 22
        fi
        loginfo "syslog: $TAG.$SEVERITY [$REFCODE]: $MESSAGE"
        logger -t $TAG.$SEVERITY "[$REFCODE]: $MESSAGE"
        if [ $? -ne 0 ]
        then
                logerror "Error running logger"
                return 1
        fi
	case $SEVERITY in
		info)
			loginfo "$MESSAGE" ;;
		warning)
			logwarn "$MESSAGE" ;;
		critical)
			logerror "$MESSAGE" ;;
		fatal)
			logerror "$MESSAGE" ;;
		*|/?)	logerror "level of severity: $SEVERITY not Available for logsyslog function" ;; 
	esac
}

# Run a programm and log it function: runit
function runit 
{
$FULLDEBUG
	loginfo "Running " $*
	$* </dev/null
	rc=$?
	if [ $rc -ne 0 ]
	then
		logerror "Command $cmd returned rc=$rc"
	fi
	return $rc
}

#Run a programm and log it and exit if error function: fatalrunit

function fatalrunit
{
$FULLDEBUG
	runit $*
	rc=$?
	if [ $rc -ne 0 ] 
	then
		fatalerror 99 "Command $cmd failed rc=$rc"
	fi
	return 0 
}

# If a file does not exist make fatal error and exit function: fatalfilenotexist

function fatalfilenotexist
{
$FULLDEBUG
	if [ ! -r $1 ]
	then  
		fatalerror 3 "File $1 does not exist"
	fi
	return 0
}

# Check user ID for running a program function: fatalcheckid and exist if user ID is not authorized.

function fatalcheckid
{
$FULLDEBUG
	idtocheck=$1
	currentid=`factory_id -un`
	
	if [ "$idtocheck" != "$currentid" ]
	then
		fatalerror 99 "Program should run as $idtocheck instead of $currentid"
	fi
	return 0
}

# Check group ID for running a program function: fatalcheckid and exist if group ID is not authorized.
function fatalcheckgroup
{
$FULLDEBUG
	grouptocheck=$1
	grouplist=`factory_id -Gn`
	echo $grouplist | grep -w $grouptocheck 1> /dev/null
	if [ $? -ne 0 ]
	then
		fatalerror 99 "You must be member of group $grouptocheck to be able to run this program"
	fi
	return 0
}

# Setting the log environment function: setlogenv

function setlogenv
{
	if [ "$FACTORY_AUDIT" = "Y" ]
	then
		FACTORY_LOGDIR=/var/audit
	else
		FACTORY_LOGDIR=/var/log
	fi
	export FACTORY_LOGDIR
	DAY=$(date "+""%Y""%m""%d")
	DATE=$(date "+""%Y""%m""%d""%H""%M""%S")
 	if [ "$FACTORY_LOGFILEXT" = "FULLDATE" ]
	then
		export FACTORY_LOGFILE="$FACTORY_LOGDIR/$PROGNAME.$DATE"
	else
		export FACTORY_LOGFILE="$FACTORY_LOGDIR/$PROGNAME.$DAY"
	fi
	if [[ "$FACTORY_DOLLARU" = "Y" ]]
	then
		REVERSE_ON=""
		REVERSE_OFF=""
	else
		REVERSE_ON=`tput smso`
		REVERSE_OFF=`tput rmso`
	fi

	export REVERSE_ON REVERSE_OFF
	if [ ! -r $FACTORY_LOGFILE ]
	then
		touch $FACTORY_LOGFILE
		chmod a+w $FACTORY_LOGFILE
	fi
}

function add_temp_files
{
$FULLDEBUG
	if [ ! -z "$1" ]
	then
		tempfn=/var/factory/tmp/$PROGNAME.$1.$$
	else
		tempfn=/var/factory/tmp/$PROGNAME.$$
	fi
	cnt_tempfn=0
	while [ -f ${tempfn}.${cnt_tempfn} ] 
	do
		cnt_tempfn=$((cnt_tempfn + 1))
	done
	tempfn=${tempfn}.${cnt_tempfn}
	#
	# Keep list of created temp files
	#
	if [ ! -f $FACTORY_TMPFILES ]
        then
                touch $FACTORY_TMPFILES
                chmod ugo+wr $FACTORY_TMPFILES
        fi
	echo $tempfn >> $FACTORY_TMPFILES
	touch $tempfn
	chmod ugo+wr $tempfn
	echo $tempfn
}

function add_audit_files
{
$FULLDEBUG
        DATE=$(date "+""%Y""%m""%d""%H""%M""%S")
	if [ ! -z "$1" ]
	then
		tempfn=/var/factory/audit/$PROGNAME.$1.$SHORTHOSTNAME.$DATE
	else
		tempfn=/var/factory/audit/$PROGNAME.$SHORTHOSTNAME.$DATE
	fi
	while [ -f $tempfn ] 
	do
		tempfn=$tempfn.$$	
	done
	#
	# Keep list of created temp files
	#
	touch $tempfn
	chmod ugo+wr $tempfn
	echo $tempfn
}


function remove_temp_files
{
$FULLDEBUG
	if [ -f "$FACTORY_TMPFILES" ]
	then
		for fn in $(cat $FACTORY_TMPFILES|grep $$)
		do
			if [ -f $fn ]
			then
				rm -f $fn 
			fi
		done
		#rm -f $FACTORY_TMPFILES
	fi
}

function fatalcheckplatform
{
$FULLDEBUG
        pltocheck=$1
        if [ "$pltocheck" != "$FACTORY_PLATFORM" ]
        then
                fatalerror 99 "Program should run on $pltocheck instead of $FACTORY_PLATFORM"
        fi
        return 0
}

function isVirtualMachine	# Checking if the machine (only in Linux OS) is a virtual machine (VMWare) function: isVirtualMachine
{
$FULLDEBUG
	fatalcheckplatform "Linux"

	LSPCI=/sbin/lspci
	if $LSPCI | grep -i VMware > /dev/null; then
		logdebug "virtual (detected VMware branded PCI hardware)"
		return 0
	else
		logdebug "physical (no VMware branded PCI hardware detected)"
		return 1
	fi

}

function yorn			# YES or NO reponse in 3 languages English,French and German function: yorn
{
$FULLDEBUG
      response=""
      case $1 in
            -n)
                  defrep="n"
                  promptstring="[Y/<N>]"
                  shift 1
                  ;;
            -y)
                  defrep="y"
                  promptstring="[<Y>/N]"
                     shift 1
                     ;;
            *)
                  defrep=""
                  promptstring="[Y/N]"
                     ;;
      esac

      while [ -z "$response" ]
      do
            prompt="$*"
            if [ "$prompt" ] ; then
                        echo $prompt $promptstring " ? \c"
            else
                        echo $promptstring " ? \c"
            fi
            read response
            if [ -z "$response" ] ; then
                        if [ "$defrep" ] ; then
                        response="$defrep"
                        fi
                  continue
            fi

            case $response in
                  Y|y|O|o|yes|Yes|Oui|oui|Ya|ya)
                        response="y"
                  ;;
                  N|n|No|no|Non|non|Nein|nein)
                        response="n"
                  ;;
                  *)
                        echo " response $response not understood"
                        response=""
                  ;;
            esac
      done

      echo $response
      if [ "$response" = "y" ] ; then
            return 0
      fi
      if [ "$response" = "n" ] ; then
            return 1
      fi
}

function nok_ok 		#Display message action complete successful or action failed depend of param 1 that is the RC number.
{
$FULLDEBUG
	RC=$1
	if [ $RC -eq 0 ]
	then
		echo "  Action has completed successfully."
	else
		echo "  Action has failed with retrun code $RC."
	fi
	return $RC
}

function set_prop_file		# Change user owner and group owner of the file function: set_prop_file
{
$FULLDEBUG
	fatalcheckid root
	if [ $# -ne 4 -o $? -ne 0 ]
	then
        	logerror "Incorrect number of options or incorrect user that executing this function."
        	return 1
	fi
	
	FILE_MOD=$1
	FILE_OWNER=$2
	FILE_GROUP=$3
	FILE_NAME=$4
	rc=0
	
	if [ -f $FILE_NAME ]
	then
        	runit chmod $FILE_MOD $FILE_NAME
        	rc=$((rc + $?))
        	runit chown $FILE_OWNER $FILE_NAME
        	rc=$((rc + $?))
        	runit chgrp $FILE_GROUP $FILE_NAME
        	rc=$((rc + $?))
        	return $rc
	else
        	The file does not exist
        	return 2
	fi
}

# Function: list_to_line
#       - Simple function to convert entries on list mode to a single line separate by space
#               (replace all CR by a SPACE)
#       - sort input before put in line.
function list_to_line
{
$FULLDEBUG
infile=$1
sort $infile | sed -e :a -e '$!N;s/\n/ /;ta' -e 'P;D'
}


# Function: test_notnum
#       - function used to test if a value is numeric or not.
#       - can test positve, negative or both possibility.
#       - return code :
#               0 = value is numeric
#               22= value is not numeric
function test_notnum
{
$FULLDEBUG

testnumval="[+-]*"
while getopts ":pnv:" opts
do
        case $opts in
                p) testnumval="[+]*" ;;
                n) testnumval="-" ;;
                v) val=$OPTARG ;;
                *) logerror "check usage function"
                   return 22 ;;
        esac
done
if [[ -z "$val" ]]
then
        logerror "value to be test was empty."
        return 22
fi

if [[ -z "$(echo ${val} | egrep "^${testnumval}[ [:digit:] ]*$")" ]]
then
        logerror "Wrong numeric value : $val (or not a numeric value)."
        return 22
else
        loginfo "Value $val is numeric."
        return 0
fi
}

# Function: genpwd
#       - Generate random password and output on standard output
#
function genpwd
{
$FULLDEBUG

minpwdleng=8
minnum=1
minalpha=2
while getopts ":l:n:a:" opts
do
	case $opts in
		l) minpwdleng=$OPTARG ;;
		n) minnum=$OPTARG ;;
		a) minalpha=$OPTARG ;;
		*) : ;;
	esac
done	
# test and compare limits of num and alpha with lenght 
# lenght , minnum and minalpha must be a numeric value
echo $minpwdleng | egrep "^[0-9]+$" 1>/dev/null 2>&1
if [ $? -ne 0 ]
then
	minpwdleng=8
fi
echo $minnum | egrep "^[0-9]+$" 1>/dev/null 2>&1
if [ $? -ne 0 ]
then
	minnum=1
fi
echo $minalpha | egrep "^[0-9]+$" 1>/dev/null 2>&1
if [ $? -ne 0 ]
then
	minalpha=2
fi
# lenght must be to 3 char
if [ $minpwdleng -lt 3 ]
then
	minpwdleng=8
fi
# sum of minnum + minalpha must be shorter or egal to lenght
minalnumleng=$(expr $minnum + $minalpha)
if [ $minpwdleng -lt $minalnumleng ]
then
	minalpha=$(expr $minpwdleng - $minnum)
fi
# reset minimum criteria for alpha and num if limit are defined over the lenght
if [ $minpwdleng -le $minnum -o $minpwdleng -le $minalpha ]
then
	minnum=1
	minalpha=2
fi
# clear previous password and define list of char used for generate password
password=""
policy=tobecheck
alpha="abcdefghijkmnopqrstuvwxyzABCDEFGHIJKLMNPQRSTUVWXYZ"
number="0123456789"
string=$number$alpha$number
# Generate the password
i=0
while (( $i < $minpwdleng ))
do	
	char=$(echo $string |cut -c$(($RANDOM%${#string}+1)))
	password="${password} ${char}"
	echo "${password}" | sed "s/ //g" | grep "^[0-9]" 1>/dev/null 2>&1
	if [ $? -eq 0 ]
	then
		#echo "    reset because start with number : $password"   # uncomment FOR DEBUG
		password=""
		i=0
		continue
	else
               	((i=i+1))
	fi
        done
        set -A PASSWORD $password

        #check policy
        while [ $policy = "tobecheck" ]
        do
                alphapwd=$(echo ${PASSWORD[*]} |sed "s/[0-9 ]//g") # pwd without number and space
                nbralpha=${#alphapwd}
                #nbrnum=$(( $minpwdleng - $minnum ))
                nbrnum=$(( $minpwdleng - $nbralpha ))
		#echo " alpha = $nbralpha  ---   num = $nbrnum  -----  pass = $alphapwd"   # uncomment FOR DEBUG
                #if [[ $nbralpha > $nbrnum ]]
                if [[ $nbrnum -lt $minnum ]]
                then
			pos_leng=$(($minpwdleng-1))
                        pos=$((RANDOM%$pos_leng+1))
                        num=$(echo $number |cut -c$(($RANDOM%${#number}+1)))
			#echo "posnum = $pos  --  number = $num"   # uncomment FOR DEBUG
                        PASSWORD[$pos]=$num
                elif [[ $nbralpha -lt $minalpha ]]
                then
                        pos=$((RANDOM%$minpwdleng))
                        char=$(echo $alpha |cut -c$(($RANDOM%${#alpha}+1)))
			#echo "posalpha = $pos  --  alpha = char"   # uncomment FOR DEBUG
                        PASSWORD[$pos]=$char
                else
                        policy=checked
                fi
done
pwd=$(echo ${PASSWORD[*]}|sed "s/ //g")
echo $pwd
}

#
# function used to add cron job defined in configuration file(s) (add as parameter)
# files should have the following :
# name;user;script;schedule_min;schedule_hour;schedule_dayofmounth;schedule_mounth;schedule_weekday
#
function addcronjobs {
$FULLDEBUG
	fatalcheckid root
        parameterlist=$*
        filelist=$parameterlist
        nosudo="no"
        echo $parameterlist|grep dont_use_sudo > /dev/null
        if  [ $? = "0" ]
        then
                nosudo="yes"
                filelist=`echo $parameterlist|sed 's/dont_use_sudo//g'`
        fi
	for fn in $filelist
	do
		if [ ! -r $fn ]	
		then
			logwarn "file $fn not readable"
			continue
		fi
		IFS_BKP=$IFS
		IFS="
"
	
		for line in `cat $fn`
		do
			cronjob_name=$(echo $line|awk -F";" '{print $1}')
			cronjob_user=$(echo $line|awk -F";" '{print $2}')
			cronjob_script=$(echo $line|awk -F";" '{print $3}'|sed -e 's/\>/\\>/g' -e 's/\&/\\&/g' -e "s/\'/\\\'/g" -e 's/\"/\\\"/g')
			cronjob_schedule_min=$(echo $line|awk -F";" '{print $4}')
			cronjob_schedule_hour=$(echo $line|awk -F";" '{print $5}')
			cronjob_schedule_dayofmounth=$(echo $line|awk -F";" '{print $6}')
			cronjob_schedule_mounth=$(echo $line|awk -F";" '{print $7}')
			cronjob_schedule_weekday=$(echo $line|awk -F";" '{print $8}')

			# if schedule is random or all: replace
			case $cronjob_schedule_min in
				random)
					cronjob_schedule_min=$(($RANDOM%60))
					;;
				all) 
					cronjob_schedule_min="\*"
					;;	
			esac 
			case $cronjob_schedule_hour in
				random)
					cronjob_schedule_hour=$(($RANDOM%24))
					;;
				all)
					cronjob_schedule_hour="\*"
					;;
			esac
			case $cronjob_schedule_dayofmounth in
				random)
					cronjob_schedule_dayofmounth=$((1 + $RANDOM%28))
					;;
				all)
					cronjob_schedule_dayofmounth="\*"
					;;
			esac
			case $cronjob_schedule_mounth in 
				random)
					cronjob_schedule_mounth=$((1+ $RANDOM%12))
					;;
				all)
					cronjob_schedule_mounth="\*"
					;;
			esac
			case $cronjob_schedule_weekday in 
				random)
					cronjob_schedule_weekday=$(($RANDOM%7))
					;;
				all)
					cronjob_schedule_weekday="\*"
					;;
			esac

                	tmpcron=$(add_temp_files crontab)
                	crontab -l $cronjob_user| grep  -v "$cronjob_name"  > $tmpcron
                	# cron schedule should be adjust
			eval echo "$cronjob_schedule_min $cronjob_schedule_hour $cronjob_schedule_dayofmounth $cronjob_schedule_mounth $cronjob_schedule_weekday $cronjob_script $cronjob_option \# $cronjob_name" >> $tmpcron
			if [ $nosudo = "yes" ]
                        then
              			crontab $tmpcron
                        else
                        	$FACTORY_SUDO -u $cronjob_user crontab $tmpcron
                        fi
			rc=$?
			if [ $rc -ne 0 ]
			then
				logerror "$FACTORY_SUDO -u $cronjob_user crontab $tmpcron Failed !"
				exit 2
			fi
			remove_temp_files
		done
		IFS=$IFS_BKP
	done
}

# Function: convertsize
#	- Convert a sike in Bytes or other scale to another scale
#	- Input : option mandatory
#			-s size with unit (100MB, 1.04TB, 100348965392B, 2039GB)
#		  	-c unit (B, KB, MB, GB, TB, PB, EX, ZB, YB)
#		  option not mandatory
#			-r to display automatic scaled human readable size
#	- output : <input size>:<output size converted>:<optional human readable size>
#		ex : 	0.32TB:335544MB:327.67GB
#			32GB:0TB:32.00GB
#			32GB:32768MB:32.00GB
#			0.3243GB:332MB:332.08MB

function convertsize {
$FULLDEBUG

humread="n"
opts=":s:c:r"
while getopts $opts opt
do
        case $opt in
                s) ISIZE="$OPTARG" ;;
                c) CSIZE="$OPTARG" ;;
		r) humread="y" ;;
        esac
done

if [ -z "$ISIZE" -o -z "$CSIZE" ]
then
	echo "error with params."
fi

EISIZE=$(echo "$ISIZE" | awk '{INS=toupper ($0); print substr( INS, length(INS) - 1, length(INS) ) }')
case "$EISIZE" in
	KB)	cinbmult=' * 1024' ;;
	MB)	cinbmult=' * 1024^2' ;;
	GB)	cinbmult=' * 1024^3' ;;
	TB)	cinbmult=' * 1024^4' ;;
	PB)	cinbmult=' * 1024^5' ;;
	EB)	cinbmult=' * 1024^6' ;;
	ZB)	cinbmult=' * 1024^7' ;;
	YB)	cinbmult=' * 1024^8' ;;
	[0-9]B)	cinbmult=' * 1' ;;
esac

ECSIZE=$(echo "$CSIZE" | awk '{INS=toupper ($0); print substr( INS, length(INS) - 1, length(INS) ) }')
case "$ECSIZE" in
	KB)	convdiv=' / 1024' ;;
	MB)	convdiv=' / 1024^2' ;;
	GB)	convdiv=' / 1024^3' ;;
	TB)	convdiv=' / 1024^4' ;;
	PB)	convdiv=' / 1024^5' ;;
	EB)	convdiv=' / 1024^6' ;;
	ZB)	convdiv=' / 1024^7' ;;
	YB)	convdiv=' / 1024^8' ;;
	[0-9]B)	convdiv=' / 1' ;;
esac

ISIZEN=$(echo "$ISIZE" | awk '{INS=toupper ($0); gsub ('/[KMGTPEZY]?B$/',"",INS); print INS}')
INBSIZE=$(echo "scale=2; $ISIZEN $cinbmult" | bc | awk '{printf "%.0f\n", $1}')
OUTSIZE=$(echo "scale=0; $INBSIZE $convdiv" | bc | awk '{printf "%.0f\n", $1}')

# convert in human readable format independently of convert size selected in option
HUMREADVAL=""
if [ "$humread" = "y" ]
then
	# Convert input parameter (number of bytes) to Human Readable form
	SLIST="bytes,KB,MB,GB,TB,PB,EB,ZB,YB"
	POWER=1
	VAL=$( echo "scale=2; $INBSIZE / 1" | bc)
	VINT=$( echo $VAL / 1024 | bc )
	while [ $VINT -gt 0 ]
	do
		let POWER=POWER+1
		VAL=$( echo "scale=2; $VAL / 1024" | bc)
		VINT=$( echo $VAL / 1024 | bc )
	done
	HUMREADVAL=$(echo $VAL$( echo $SLIST | cut -f$POWER -d, ))
fi
echo "${ISIZEN}${EISIZE}:${OUTSIZE}${ECSIZE}:${HUMREADVAL}"
}

function whorun 			#Return muid:fuller conencted to teh server
{
user_muid=`who -m|awk '{print $1}'`
user_fullname=`finger -m ${user_muid}|grep "In real life"|sed 's/.*life: //'`

echo "${user_muid} : ${user_fullname}"
}

#
# Init part, run only once
#
	export FACTORY_PLATFORM=`uname`
	case $FACTORY_PLATFORM in 
		CYGWIN*)
			export ECHOCMD="echo"
			;;
		Linux*)
			export ECHOCMD="echo"
			# Setup Linux distibution
			if [ -r /etc/SuSE-release ]
			then
				export FACTORY_DISTRIB=Suse
			elif [ -r /etc/redhat-release ]
			then
				export FACTORY_DISTRIB=RedHat
			fi
			;;
		SunOS)
			alias awk=/usr/xpg4/bin/awk
			export ECHOCMD="print"
			;;
		*)
			export ECHOCMD="print"
			;;
	esac

if [[ -z "$FACTORY_CORE_FUNCTIONS" ]]
then 
	export HOSTNAME=`hostname`
	export SHORTHOSTNAME=`echo $HOSTNAME | cut -f1 -d.`
	if [ -z "$PROGNAME" ]
	then
	  case $FACTORY_PLATFORM in
		SunOS)	
			export PROGNAME=`/usr/xpg4/bin/basesename -- $0`
		;;
		*)
			export PROGNAME=`basename -- $0`
		;;
	  esac
	fi

	setlogenv

	export FACTORY_TMPDIR=/tmp
	export FACTORY_TMPFILES=$FACTORY_TMPDIR/$PROGNAME.TEMFILES.$$

	PATH=$PATH:$FACTORY_ROOT
	export PATH

	#
	# Check tty
	#

	tty -s >/dev/null 2>/dev/null
	if [ $? -ne 0 ]
	then
		FACTORY_NOTTY=1
	fi
	FACTORY_CORE_FUNCTIONS="DONE"
	export FACTORY_NOTTY
	export FACTORY_CORE_FUNCTIONS
	if [ -f /usr/bin/sudo ]
	then
		FACTORY_SUDO=/usr/bin/sudo
	elif [ -f /usr/local/bin/sudo ]
	then
		FACTORY_SUDO=/usr/local/bin/sudo
	else
		logerror "Can't find sudo command"
		exit 1
	fi
	export FACTORY_SUDO
fi
