#!/bin/ksh


#### functions.cfg
##
## Set of functions to manage configuration files
##
##---

##### findcfg
##
## Output, in order,  the list of Confguration
##
###### Input:
##
## * -M			Config is based on machine configuration
## * -U			Config is based on user configuration 
## * -m hostname	Config is based on hostname arg
## * -u username	Config is based on username arg
## * -r 		Reverse order of the Config
##
###### Ouput:
##
## * List of Config
##
###### Retur code:
##
## *  0:                        Ok
##
##---

function findcfg 
{
	$FULLDEBUG

	#
	# Set default values
	#

	CFG_MACHINE=$SHORTHOSTNAME
	USE_CFG_MACHINE="Y"
	USE_CFG_USER="N"
	CFG_REVERSE="N"	

	#
	# Parse command line options
	#

	while getopts "MUrm:u:" opt
	do
        case $opt in
       	         M)
       	                 CFG_MACHINE=$SHORTHOSTNAME
			 USE_CFG_MACHINE="Y"
			 USE_CFG_USER="N";;
       	         U)
      	                 CFG_USER=`factory_id -un`
			 USE_CFG_MACHINE="N"
			 USE_CFG_USER="Y";;
       	         m)      
       	                 CFG_MACHINE=$OPTARG
			 USE_CFG_MACHINE="Y"
		         USE_CFG_USER="N";;
       	         u)
       	                 CFG_USER=$OPTARG
			 USE_CFG_MACHINE="N"
		  	 USE_CFG_USER="Y";;
		 r)
			 CFG_REVERSE="Y";;
                
       	         \? )    usage
                         exit 1 ;;
       		 esac
	done
	shift $(($OPTIND - 1))

	#
	# Save old FACTORY_CFGLIST
	#

	OLD_FACTORY_CFGLIST=$FACTORY_CFGLIST

	#
	# Build FACTORY_CFGLIST
	#

	if [ "$USE_CFG_MACHINE" = "Y" ]
	then
		FACTORY_CFGLIST=`machinecfg $CFG_MACHINE`
	fi

	if [ "$USE_CFG_USER" = "Y" ]
	then
		FACTORY_CFGLIST=`usercfg $CFG_USER`
	fi

	if [ "$CFG_REVERSE" = "Y" ]
	then
		tmplist=`reverse $FACTORY_CFGLIST`
		FACTORY_CFGLIST=$tmplist
	fi

	#output the $FACTORY_CFGLIST
	
	echo $FACTORY_CFGLIST

	#
	#  Reset FACTORY_CFGLIST
	#

	FACTORY_CFGLIST=$OLD_FACTORY_CFGLIST
	return 0

}

##### machinecfg
##
## Descritpion
##
##	Order of criteria for configuration file search
##	$MACHINE
##	-$FACTORY_ROLE$FACTORY_LOCATION$FACTORY_CATEGORY
##	--$FACTORY_ROLE$FACTORY_LOCATION$FACTORY_ENV
##	---$FACTORY_ROLE$FACTORY_CATEGORY
##	----$FACTORY_ROLE$FACTORY_ENV
##	-----$FACTORY_ROLE$FACTORY_LOCATION
##	------$FACTORY_ROLE
##	-------$FACTORY_MW$FACTORY_CATEGORY
##	--------$FACTORY_MW$FACTORY_ENV
##	---------$FACTORY_MW
##	----------$FACTORY_LOCATION$FACTORY_DATACENTER$FACTORY_CATEGORY
##	-----------$FACTORY_LOCATION$FACTORY_DATACENTER$FACTORY_ENV
##	------------$FACTORY_LOCATION$FACTORY_ARCH$FACTORY_CATEGORY
##	-------------$FACTORY_LOCATION$FACTORY_ARCH$FACTORY_ENV
##	--------------$FACTORY_LOCATION$FACTORY_CATEGORY
##	---------------$FACTORY_LOCATION$FACTORY_ENV
##	----------------$FACTORY_ARCH$FACTORY_LOCATION$FACTORY_DATACENTER
##	-----------------$FACTORY_ARCH$FACTORY_LOCATION
##	------------------$FACTORY_LOCATION$FACTORY_DATACENTER
##	-------------------$FACTORY_LOCATION 
##	--------------------$FACTORY_ARCH$FACTORY_CATEGORY
##	---------------------$FACTORY_ARCH$FACTORY_ENV
##	----------------------$FACTORY_ARCH
##	-----------------------$FACTORY_CATEGORY
##	------------------------$FACTORY_ENV
##	-------------------------default
##
###### Input:
##
## * Machine_Name
##
###### Ouput:
##
## * output
##
###### Return code:
##
## *  0:                        Ok
## *  other:                  Error
##
##---

function machinecfg 	
{
	$FULLDEBUG
	#
	# For the moment hardcode config
	# Next step : get from config file
	# Next Next step : Get from config server (ldap for example)
	#

	#
	# Backup FACTORY_<*> variables
	#

	PREV_FACTORY_ROLE="$FACTORY_ROLE"
	PREV_FACTORY_MW="$FACTORY_MW"
	PREV_FACTORY_ENV="$FACTORY_ENV"
	PREV_FACTORY_ARCH="$FACTORY_ARCH"
	PREV_FACTORY_DATACENTER="$FACTORY_DATACENTER"
	PREV_FACTORY_LOCATION="$FACTORY_LOCATION"

	MACHINE=$1
	if [ -r $FACTORY_ROOT/attrcfg/etc/attributes.$MACHINE ]
	then
		. $FACTORY_ROOT/attrcfg/etc/attributes.$MACHINE
	fi

	#
	# If FACTORY_LOCATION is no set in the attributes config file,
	# FACTORY_LOCATION is the first 2 characters of the hostname 
	#	sg,....
	#
	if [ "$FACTORY_LOCATION" = "" ]
	then
		FACTORY_LOCATION=$(echo $MACHINE | cut -c1-2)
	fi

	#
        # If FACTORY_ARCH is no set in the attributes config file,
        # FACTORY_ARCH is the output of uname command.
	# AIX , Linux , SunOS .....
	#
	if [ "$FACTORY_ARCH" = "" ]
        then
                FACTORY_ARCH=$(uname)
        fi

	OUTPUT="$MACHINE"

        if [ "$FACTORY_ENV" != "" ]
        then
                if [ "$FACTORY_ROLE" != "" ]
                then
			if [ "$FACTORY_CATEGORY" != "" ]
                        then
                        	OUTPUT="$OUTPUT $FACTORY_ROLE$FACTORY_LOCATION$FACTORY_CATEGORY $FACTORY_ROLE$FACTORY_LOCATION$FACTORY_ENV $FACTORY_ROLE$FACTORY_CATEGORY $FACTORY_ROLE$FACTORY_ENV $FACTORY_ROLE$FACTORY_LOCATION $FACTORY_ROLE"
                        else
                        	OUTPUT="$OUTPUT $FACTORY_ROLE$FACTORY_LOCATION$FACTORY_ENV $FACTORY_ROLE$FACTORY_ENV $FACTORY_ROLE$FACTORY_LOCATION $FACTORY_ROLE"
                        fi
                fi

                if [ "$FACTORY_MW" != "" ]
                then
                        if [ "$FACTORY_CATEGORY" != "" ]
                        then
                                OUTPUT="$OUTPUT $FACTORY_MW$FACTORY_CATEGORY $FACTORY_MW$FACTORY_ENV $FACTORY_MW"
                        else
                                OUTPUT="$OUTPUT $FACTORY_MW$FACTORY_ENV $FACTORY_MW"
                        fi
                fi

                if [ "$FACTORY_DATACENTER" != "" ]
                then
                        if [ "$FACTORY_CATEGORY" != "" ]
                        then
                                OUTPUT="$OUTPUT $FACTORY_LOCATION$FACTORY_DATACENTER$FACTORY_CATEGORY $FACTORY_LOCATION$FACTORY_DATACENTER$FACTORY_ENV $FACTORY_LOCATION$FACTORY_ARCH$FACTORY_CATEGORY $FACTORY_LOCATION$FACTORY_ARCH$FACTORY_ENV $FACTORY_LOCATION$FACTORY_CATEGORY $FACTORY_LOCATION$FACTORY_ENV $FACTORY_ARCH$FACTORY_LOCATION$FACTORY_DATACENTER $FACTORY_ARCH$FACTORY_LOCATION $FACTORY_LOCATION$FACTORY_DATACENTER $FACTORY_LOCATION"
                        else
                                OUTPUT="$OUTPUT $FACTORY_LOCATION$FACTORY_DATACENTER$FACTORY_ENV $FACTORY_LOCATION$FACTORY_ARCH$FACTORY_ENV $FACTORY_LOCATION$FACTORY_ENV $FACTORY_ARCH$FACTORY_LOCATION$FACTORY_DATACENTER $FACTORY_ARCH$FACTORY_LOCATION $FACTORY_LOCATION$FACTORY_DATACENTER $FACTORY_LOCATION"
                        fi
                else
                        if [ "$FACTORY_CATEGORY" != "" ]
                        then
                                OUTPUT="$FACTORY_LOCATION$FACTORY_ARCH$FACTORY_CATEGORY $FACTORY_LOCATION$FACTORY_ARCH$FACTORY_ENV $FACTORY_LOCATION$FACTORY_CATEGORY $FACTORY_LOCATION$FACTORY_ENV $FACTORY_ARCH$FACTORY_LOCATION $FACTORY_LOCATION"
                        else
                                OUTPUT="$OUTPUT $FACTORY_LOCATION$FACTORY_ARCH$FACTORY_ENV $FACTORY_LOCATION$FACTORY_ENV $FACTORY_ARCH$FACTORY_LOCATION $FACTORY_LOCATION"
                        fi
                fi

		if [ "$FACTORY_CATEGORY" != "" ]
		then
                	OUTPUT="$OUTPUT $FACTORY_ARCH$FACTORY_CATEGORY $FACTORY_ARCH$FACTORY_ENV $FACTORY_ARCH $FACTORY_CATEGORY $FACTORY_ENV default"
		else
                	OUTPUT="$OUTPUT $FACTORY_ARCH$FACTORY_ENV $FACTORY_ARCH $FACTORY_ENV default"
		fi
        else
                if [ "$FACTORY_ROLE" != "" ]
                then
			if [ "$FACTORY_CATEGORY" != "" ]
                        then
                                OUTPUT="$OUTPUT $FACTORY_ROLE$FACTORY_LOCATION$FACTORY_CATEGORY $FACTORY_ROLE$FACTORY_CATEGORY $FACTORY_ROLE$FACTORY_LOCATION $FACTORY_ROLE"
                        else
                        	OUTPUT="$OUTPUT $FACTORY_ROLE$FACTORY_LOCATION $FACTORY_ROLE"
                        fi
                fi

                if [ "$FACTORY_MW" != "" ]
                then
                        if [ "$FACTORY_CATEGORY" != "" ]
                        then
                                OUTPUT="$OUTPUT $FACTORY_MW$FACTORY_CATEGORY $FACTORY_MW"
                        else
                                OUTPUT="$OUTPUT $FACTORY_MW"
			fi
                fi

                if [ "$FACTORY_DATACENTER" != "" ]
                then
                        if [ "$FACTORY_CATEGORY" != "" ]
                        then
                                OUTPUT="$OUTPUT $FACTORY_LOCATION$FACTORY_DATACENTER$FACTORY_CATEGORY $FACTORY_LOCATION$FACTORY_ARCH$FACTORY_CATEGORY  $FACTORY_LOCATION$FACTORY_CATEGORY $FACTORY_ARCH$FACTORY_LOCATION$FACTORY_DATACENTER $FACTORY_ARCH$FACTORY_LOCATION $FACTORY_LOCATION$FACTORY_DATACENTER $FACTORY_LOCATION"
                        else
                                OUTPUT="$OUTPUT $FACTORY_ARCH$FACTORY_LOCATION$FACTORY_DATACENTER $FACTORY_ARCH$FACTORY_LOCATION $FACTORY_LOCATION$FACTORY_DATACENTER $FACTORY_LOCATION"
                        fi
                else
                        if [ "$FACTORY_CATEGORY" != "" ]
                        then
                                OUTPUT="$FACTORY_LOCATION$FACTORY_ARCH$FACTORY_CATEGORY $FACTORY_LOCATION$FACTORY_CATEGORY $FACTORY_ARCH$FACTORY_LOCATION $FACTORY_LOCATION"
                        else
                                OUTPUT="$OUTPUT $FACTORY_ARCH$FACTORY_LOCATION $FACTORY_LOCATION"
                        fi
                fi

		if [ "$FACTORY_CATEGORY" != "" ]
		then
                	OUTPUT="$OUTPUT $FACTORY_ARCH$FACTORY_CATEGORY $FACTORY_ARCH $FACTORY_CATEGORY default"
		else
                	OUTPUT="$OUTPUT $FACTORY_ARCH default"
		fi
        fi

        echo $OUTPUT

	#
	# Set back environment variables
	#

	FACTORY_ROLE="$PREV_FACTORY_ROLE"
	FACTORY_MW="$PREV_FACTORY_MW"
	FACTORY_ENV="$PREV_FACTORY_ENV"
	FACTORY_ARCH="$PREV_FACTORY_ARCH"
	FACTORY_DATACENTER="$PREV_FACTORY_DATACENTER"
	FACTORY_LOCATION="$PREV_FACTORY_LOCATION"

}

# Show user configuration function: usercfg

function usercfg
{
$FULLDEBUG
	grplist=`factory_id -Gn $1`
	echo "$1 $grplist default"
}

function reverse
{
	$FULLDEBUG
	list=$*
	reverselist=""
	for element in $list
	do
		reverselist="$element $reverselist"
	done
	echo $reverselist
}


# 
# Finding the configuration file function: findcfgfile
function findcfgfile
{
	$FULLDEBUG
	filename=$1
	shift 1
	FACTORY_CFGLIST=$(findcfg $*)
	for suffix in $FACTORY_CFGLIST
	do
		if [ -r $filename.$suffix ]
		then 	
			$ECHOCMD $filename.$suffix
			return 0
		fi
	done
	logwarn "No config file $filename.[$FACTORY_CFGLIST]"
	return 1
}

# Finding the configuration list function: findcfglist

function findcfglist
{
	$FULLDEBUG
	filename=$1
	shift 1
	FACTORY_CFGLIST=$(findcfg $*)
	found=""
	for suffix in $FACTORY_CFGLIST
	do
		if [ -r $filename.$suffix ]
		then 	
			$ECHOCMD $filename.$suffix
			found=1
		fi
	done
	if [ -z "$found" ]
	then
		logerror "No config file $filename.[$FACTORY_CFGLIST]"
		return 1
	fi
	return 0
}

# Sourcing the confuration file function: sourcecfgfile
	
function sourcecfgfile
{
	$FULLDEBUG
	filelist=`findcfgfile $*`
	if [ $? -ne 0 ]
	then
		return 1
	fi
	for fn in $filelist
	do
		if [ -r $fn ]
		then 	
			. $fn
			return 0
		fi
	done
	logerror "No config file for file $filelist"
	return 1
}

# Sourcing the confuration list function: sourcecfglist

function sourcecfglist
{
	$FULLDEBUG
	filelist=`findcfglist $*`
	if [ $? -ne 0 ]
	then
		return 1
	fi	
	found=""
	for fn in $filelist
	do
		if [ -r $fn ]
		then 	
			. $fn
			found=1
		fi
	done
	if [ -z "$found" ]
	then
		logerror "No config file $filelist"
		return 1
	fi
	return 0
}

# Finding the configuration file and show it function: catcfgfile
function catcfgfile
{
	$FULLDEBUG
	filelist=`findcfgfile $*`
	if [ $? -ne 0 ]
	then
		return 1
	fi	
	for fn in $filelist
	do
		if [ -r $fn ]
		then 	
			cat  $fn
			return 0
		fi
	done
	logerror "No config file $filelist"
	return 1
}

# Finding the configuration list and show it function: catcfglist

function catcfglist
{
	$FULLDEBUG
	filelist=`findcfglist $*`
	if [ $? -ne 0 ]
	then
		return 1
	fi
	found=""
	for fn in $filelist
	do
		if [ -r $fn ]
		then 	
			cat $fn
			found=1
		fi
	done
	if [ -z "$found" ]
	then
		logerror "No config file $filelist"
		return 1
	fi
	return 0
}

