#!/bin/ksh
#

$FULLDEBUG

#### functions.logs
##
## Set of functions to manage miscellaneous logs
##
##---

##### setlogenv
##
## Setting the log environment variables.
## This function is called in the init part.
##
###### Input:
##
## The following variable will change the contenent of the output variables
## * $FACTORY_AUDIT
## * FACTORY_LOGFILEXT (if set to "FULLDATE"
##
###### Ouput:
##
## * FACTORY_LOGDIR
## * FACTORY_LOGFILE
##
##---

function setlogenv
{
	if [ "$FACTORY_AUDIT" = "Y" ]
	then
		FACTORY_LOGDIR=/var/log/factory/audit
	else
		FACTORY_LOGDIR=/var/log/factory/logs
	fi
	export FACTORY_LOGDIR
	DAY=$(date "+""%Y""%m""%d")
	DATE=$(date "+""%Y""%m""%d""%H""%M""%S")
 	if [ "$FACTORY_LOGFILEXT" = "FULLDATE" ]
	then
		export FACTORY_LOGFILE="$FACTORY_LOGDIR/$PROGNAME.$DATE"
	else
		export FACTORY_LOGFILE="$FACTORY_LOGDIR/$PROGNAME.$DAY"
	fi
	if [[ "$FACTORY_DOLLARU" = "Y" ]]
	then
		REVERSE_ON=""
		REVERSE_OFF=""
	else
		REVERSE_ON=`tput smso`
		REVERSE_OFF=`tput rmso`
	fi

	export REVERSE_ON REVERSE_OFF
	if [ ! -r $FACTORY_LOGFILE ]
	then
		touch $FACTORY_LOGFILE
		chmod a+w $FACTORY_LOGFILE
	fi
}

##### msgprefix
##
## Output format messages depending of the varible setting (see input)
##
###### Input:
##
## * $FACTORY_NOMSGPREFIX
## * $FACTORY_LOGFULLDATE
## * $FACTORY_LOGPROGNAME
## * $FACTORY_LOGPID
## * $FACTORY_LOGHOSTNAME
## * $FACTORY_LOGUSER
##
###### Ouput:
##
## * 
##
##---


function msgprefix
{
$FULLDEBUG
	if [ "$FACTORY_NOMSGPREFIX" ]
	then
		return 0 
	fi

	if [ "$FACTORY_LOGFULLDATE" ]
	then
		FACTORY_MSGPREFIX=`date +"%H:%M:%S %Y/%m/%d"`
	else
		FACTORY_MSGPREFIX=`date +"%H:%M:%S"`
	fi

	if [ "$FACTORY_LOGPROGNAME" ]
	then
		if [ "$FACTORY_LOGPID" ]
		then
			FACTORY_MSGPREFIX="$FACTORY_MSGPREFIX $PROGNAME[$$]"
		else
			FACTORY_MSGPREFIX="$FACTORY_MSGPREFIX $PROGNAME"
		fi
	else
		if [ "$FACTORY_LOGPID" ]
		then
			FACTORY_MSGPREFIX="$FACTORY_MSGPREFIX [$$]"
		fi
	fi

	if [ "$FACTORY_LOGHOSTNAME" ]
	then
		if [ "$FACTORY_LOGUSER" ]
		then
			username=`factory_id -un`
			if [ "$username" != "$LOGNAME" ]
			then
				FACTORY_MSGPREFIX="$ ($FACTORY_MSGPREFIX,$LOGNAME)@$HOSTNAME"
			else
				FACTORY_MSGPREFIX="$FACTORY_MSGPREFIX $username@$HOSTNAME"
			fi
		else
			FACTORY_MSGPREFIX="$FACTORY_MSGPREFIX $HOSTNAME"
		fi
	fi
	$ECHOCMD $FACTORY_MSGPREFIX
}

##### loginfo
##
## Activate the log information in VARFACTORY_LOG (/var/factory/log) and on the screen 
##
###### Input:
##
## * Comment to be written in the log
##
###### Ouput:
##
## * Entry is added in $FACTORY_LOGFILE with the I: prefix
##
###### Exemple:
##
## *  I: 12:46:58 Starting Centreon Core
##
##---

function loginfo
{
$FULLDEBUG
	FACTORY_MSGPREFIX=`msgprefix`
	if [[ -z "$FACTORY_NOTTY" || "$FACTORY_DOLLARU" = "Y" ]]
	then
		$ECHOCMD I: $FACTORY_MSGPREFIX "$*" | tee -a $FACTORY_LOGFILE
	else
		$ECHOCMD I: $FACTORY_MSGPREFIX "$*" >> $FACTORY_LOGFILE
	fi
}

##### logtolog
##
## Activate the log information in VARFACTORY_LOG (/var/factory/log)
##
###### Input:
##
## * Comment to be written in the log
##
###### Ouput:
##
## * Entry is added in $FACTORY_LOGFILE with the I: prefix
##
###### Exemple:
##
## *  L: 12:46:58 Starting Centreon Core
##
##---

function logtolog
{
$FULLDEBUG
	FACTORY_MSGPREFIX=`msgprefix`
	$ECHOCMD L: $FACTORY_MSGPREFIX "$*" >> $FACTORY_LOGFILE
}

##### logfromfile
##
##  Append log contents followed the informations level E as Error, I as Info, W as Warning, D as Debug function: logfromfile to the factory log (/var/factory/log)
##
###### Input:
##
## * Comment to be written in the log
##
###### Ouput:
##
## * Entry is added in $FACTORY_LOGFILE with the I: prefix
##
##---

function logfromfile
{
$FULLDEBUG
	FACTORY_MSGPREFIX=`msgprefix`
	loglevel=$1
        filename=$2

	cat $filename | while read line
	do
		case "$loglevel" in
			E)
				logerror "$line"
				;;
			I)
				loginfo "$line"
				;;
			W)
				logwarn "$line"
				;;
			D)
				logdebug "$line"
				;;
		esac
	done
}

##### logwarn
##
## Transform any log line in level warning W
##
###### Input:
##
## * Comment to be written in the log
##
###### Ouput:
##
## * Entry is added in $FACTORY_LOGFILE with the W: prefix
##
###### Exemple:
##
## *  W: 12:46:58 Centreon Core is already started
##
##---

function logwarn
{
$FULLDEBUG
	FACTORY_MSGPREFIX=`msgprefix`
	if [[ -z "$FACTORY_NOTTY" || "$FACTORY_DOLLARU" = "Y" ]]
	then
		$ECHOCMD W: $FACTORY_MSGPREFIX "$*" | tee -a $FACTORY_LOGFILE
	else
		$ECHOCMD W: $FACTORY_MSGPREFIX "$*" >> $FACTORY_LOGFILE
	fi
}



##### logerror
##
## Transform any log line in level error E
##
###### Input:
##
## * Comment to be written in the log
##
###### Ouput:
##
## * Entry is added in $FACTORY_LOGFILE with the E: prefix
##
###### Exemple:
##
## *  E: 12:46:58 Centreon Core is not running
##
##---

function logerror
{
$FULLDEBUG
	FACTORY_MSGPREFIX=`msgprefix`
	if [[ -z "$FACTORY_NOTTY" || "$FACTORY_DOLLARU" = "Y" ]]
	then
		 $ECHOCMD ${REVERSE_ON}E: $FACTORY_MSGPREFIX "$*"${REVERSE_OFF}>&2
		 $ECHOCMD E: $FACTORY_MSGPREFIX "$*" >> $FACTORY_LOGFILE
	else
		$ECHOCMD E: $FACTORY_MSGPREFIX "$*" >> $FACTORY_LOGFILE
	fi
}


##### logdebug
##
## Transform any log line in level debug D
##
###### Input:
##
## * Comment to be written in the log
##
###### Ouput:
##
## * Entry is added in $FACTORY_LOGFILE with the D: prefix
##
###### Exemple:
##
## *  D: 12:46:58 Centreon Core is started
##
##---

function logdebug
{
$FULLDEBUG
	FACTORY_MSGPREFIX=`msgprefix`
	if [[ -z "$FACTORY_NOTTY" || "$FACTORY_DOLLARU" = "Y" ]]
	then
		$ECHOCMD D: $FACTORY_MSGPREFIX "$*" | tee -a $FACTORY_LOGFILE
	else
		$ECHOCMD D: $FACTORY_MSGPREFIX "$*" >> $FACTORY_LOGFILE
	fi
}

##### fatalerror
##
## Transform any log line in level error E and exit
##
###### Input:
##
## * exit code
## * Comment to be written in the log
##
###### Ouput:
##
## * Entry is added in $FACTORY_LOGFILE with the E: prefix
## * exit $1
##
###### Exemple:
##
## *  E: 12:46:58 Failed to start Centreon
##
##---

function fatalerror
{
$FULLDEBUG
	rc=$1
	shift
	logerror "$*"
	exit $rc
}

# Formating a log message and send to syslog function: logsyslog 

function logsyslog
{
        # SEVERITY= info, warning, critical or fatal (default critical)
        SEVERITY="critical"
        # ZZZ = error source (UNX,ORA,BKP,APP)
        # NNNN = error number (0001, 0123, 9405)
        REFCODE=REF-9999
        # tag is by default factory to send to tivoli
        TAG=factory
        while getopts ":r:s:t:" opt
        do
            case $opt in
                s)      SEVERITY=$OPTARG ;;
                r)      REFCODE=$OPTARG ;;
                t)      TAG=$OPTARG ;;
                *|/?)	logerror "check usage of logsyslog function $opt"
                        return 22;;
                esac
        done
	shift $(($OPTIND - 1))
	OPTIND=1
	MESSAGE=$1
        if [ -z "$MESSAGE" ]
        then
                logerror "No message specified $MESSAGE "
                return 22
        fi
        loginfo "syslog: $TAG.$SEVERITY [$REFCODE]: $MESSAGE"
        logger -t $TAG.$SEVERITY "[$REFCODE]: $MESSAGE"
        if [ $? -ne 0 ]
        then
                logerror "Error running logger"
                return 1
        fi
	case $SEVERITY in
		info)
			loginfo "$MESSAGE" ;;
		warning)
			logwarn "$MESSAGE" ;;
		critical)
			logerror "$MESSAGE" ;;
		fatal)
			logerror "$MESSAGE" ;;
		*|/?)	logerror "level of severity: $SEVERITY not Available for logsyslog function" ;; 
	esac
}

